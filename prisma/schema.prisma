// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum IngredientCategory {
  BASE
  SAUCE
  MEAT
  VEGGIES
  CHEESE
}

enum OrderStatus {
  PROCESSING
  SHIPPED
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole       @default(USER)
  order         Order[]
  notification  Notification[]
}

model VerificationToken {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  email  String
  token  String   @unique
  expire DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  email  String
  token  String   @unique
  expire DateTime

  @@unique([email, token])
}

model Order {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId
  pizzaId   Int
  base      String
  sauce     String
  veggies   String?
  cheese    String
  reference String
  status    OrderStatus @default(PROCESSING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Inventory {
  id        String             @id @default(auto()) @map("_id") @db.ObjectId
  name      String             @unique
  category  IngredientCategory
  price     Float
  stock     Int
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  message   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SubscribedEmail {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
}
